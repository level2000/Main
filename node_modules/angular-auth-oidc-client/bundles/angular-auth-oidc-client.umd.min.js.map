{"version":3,"file":"angular-auth-oidc-client.umd.min.js","sources":["../../src/services/uri-encoder.ts","../../src/models/validate-state-result.model.ts","../../src/services/oidc-security-state-validation.service.ts","../../src/services/oidc.security.service.ts","../../src/modules/auth.module.ts","../../node_modules/src/operators/zip.ts","../../node_modules/src/operators.ts","../../src/modules/auth.configuration.ts","../../src/services/oidc.security.storage.ts","../../src/services/oidc.security.common.ts","../../src/services/oidc.security.validation.ts","../../src/services/auth.well-known-endpoints.ts","../../src/services/oidc.security.check-session.ts","../../src/services/oidc.security.silent-renew.ts","../../src/services/oidc.security.user-service.ts","../../src/models/authorization-result.enum.ts","../../node_modules/src/operators/single.ts","../../node_modules/src/operators/skip.ts","../../node_modules/src/operators/skipLast.ts","../../node_modules/src/operators/skipUntil.ts","../../node_modules/src/operators/skipWhile.ts","../../node_modules/src/operators/switchMap.ts","../../node_modules/src/operators/switchMapTo.ts","../../node_modules/src/operators/take.ts","../../node_modules/src/operators/takeUntil.ts","../../node_modules/src/operators/takeWhile.ts","../../node_modules/src/operators/tap.ts","../../node_modules/src/operators/throttle.ts","../../node_modules/src/operators/throttleTime.ts","../../node_modules/src/operators/timeInterval.ts","../../node_modules/src/util/TimeoutError.ts","../../node_modules/src/operators/timeout.ts","../../node_modules/src/operators/timeoutWith.ts","../../node_modules/src/operators/window.ts","../../node_modules/src/operators/windowCount.ts","../../node_modules/src/operators/windowTime.ts","../../node_modules/src/operators/windowToggle.ts","../../node_modules/src/operators/windowWhen.ts","../../node_modules/src/operators/withLatestFrom.ts","../../node_modules/src/operators/last.ts","../../node_modules/src/operators/map.ts","../../node_modules/src/operators/mapTo.ts","../../node_modules/src/operators/materialize.ts","../../node_modules/src/operators/scan.ts","../../node_modules/src/operators/takeLast.ts","../../node_modules/src/operators/mergeMapTo.ts","../../node_modules/src/operators/mergeScan.ts","../../node_modules/src/operators/refCount.ts","../../node_modules/src/observable/ConnectableObservable.ts","../../node_modules/src/operators/onErrorResumeNext.ts","../../node_modules/src/operators/pluck.ts","../../node_modules/src/operators/pairwise.ts","../../node_modules/src/BehaviorSubject.ts","../../node_modules/src/AsyncSubject.ts","../../node_modules/src/scheduler/QueueAction.ts","../../node_modules/src/scheduler/QueueScheduler.ts","../../node_modules/src/scheduler/queue.ts","../../node_modules/src/ReplaySubject.ts","../../node_modules/src/observable/race.ts","../../node_modules/src/operators/repeat.ts","../../node_modules/src/operators/repeatWhen.ts","../../node_modules/src/operators/retry.ts","../../node_modules/src/operators/retryWhen.ts","../../node_modules/src/operators/sample.ts","../../node_modules/src/operators/sampleTime.ts","../../node_modules/src/operators/sequenceEqual.ts","../../node_modules/src/operators/defaultIfEmpty.ts","../../node_modules/src/operators/delay.ts","../../node_modules/src/operators/delayWhen.ts","../../node_modules/src/util/Set.ts","../../node_modules/src/operators/dematerialize.ts","../../node_modules/src/operators/distinct.ts","../../node_modules/src/operators/distinctUntilChanged.ts","../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../node_modules/src/operators/elementAt.ts","../../node_modules/src/operators/every.ts","../../node_modules/src/operators/exhaust.ts","../../node_modules/src/operators/exhaustMap.ts","../../node_modules/src/operators/expand.ts","../../node_modules/src/operators/filter.ts","../../node_modules/src/operators/finalize.ts","../../node_modules/src/operators/find.ts","../../node_modules/src/util/EmptyError.ts","../../node_modules/src/operators/first.ts","../../node_modules/src/util/ObjectUnsubscribedError.ts","../../node_modules/src/SubjectSubscription.ts","../../node_modules/src/Subject.ts","../../node_modules/src/util/MapPolyfill.ts","../../node_modules/src/util/Map.ts","../../node_modules/src/util/FastMap.ts","../../node_modules/src/operators/groupBy.ts","../../node_modules/src/operators/ignoreElements.ts","../../node_modules/src/operators/isEmpty.ts","../../node_modules/src/operators/bufferCount.ts","../../node_modules/src/operators/bufferTime.ts","../../node_modules/src/operators/bufferToggle.ts","../../node_modules/src/operators/bufferWhen.ts","../../node_modules/src/operators/catchError.ts","../../node_modules/src/observable/ScalarObservable.ts","../../node_modules/src/observable/EmptyObservable.ts","../../node_modules/src/observable/ArrayObservable.ts","../../node_modules/src/operators/combineLatest.ts","../../node_modules/src/observable/PromiseObservable.ts","../../node_modules/src/observable/IteratorObservable.ts","../../node_modules/src/observable/ArrayLikeObservable.ts","../../node_modules/src/Notification.ts","../../node_modules/src/operators/observeOn.ts","../../node_modules/src/observable/FromObservable.ts","../../node_modules/src/operators/mergeMap.ts","../../node_modules/src/operators/count.ts","../../node_modules/src/operators/debounce.ts","../../node_modules/src/operators/debounceTime.ts","../../node_modules/src/util/tryCatch.ts","../../node_modules/src/util/isFunction.ts","../../node_modules/src/util/isObject.ts","../../node_modules/src/Subscription.ts","../../node_modules/src/util/isPromise.ts","../../node_modules/src/util/toSubscriber.ts","../../node_modules/src/util/noop.ts","../../node_modules/src/util/pipe.ts","../../node_modules/src/util/subscribeToResult.ts","../../node_modules/src/util/isNumeric.ts","../../node_modules/src/util/isScheduler.ts","../../node_modules/src/util/isDate.ts","../../node_modules/src/util/errorObject.ts","../../node_modules/src/util/isArray.ts","../../node_modules/src/util/UnsubscriptionError.ts","../../node_modules/src/Observer.ts","../../node_modules/src/util/root.ts","../../node_modules/src/symbol/rxSubscriber.ts","../../node_modules/src/Subscriber.ts","../../node_modules/src/OuterSubscriber.ts","../../node_modules/src/util/isArrayLike.ts","../../node_modules/src/symbol/observable.ts","../../node_modules/src/Observable.ts","../../node_modules/src/symbol/iterator.ts","../../node_modules/src/InnerSubscriber.ts","../../node_modules/src/operators/audit.ts","../../node_modules/src/scheduler/Action.ts","../../node_modules/src/scheduler/AsyncAction.ts","../../node_modules/src/Scheduler.ts","../../node_modules/src/scheduler/AsyncScheduler.ts","../../node_modules/src/scheduler/async.ts","../../node_modules/src/observable/TimerObservable.ts","../../node_modules/src/operators/buffer.ts"],"sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\nexport class UriEncoder implements HttpParameterCodec {\n/**\n * @param {?} key\n * @return {?}\n */\nencodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nencodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n/**\n * @param {?} key\n * @return {?}\n */\ndecodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\ndecodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","\nexport class ValidateStateResult {\n/**\n * @param {?=} access_token\n * @param {?=} id_token\n * @param {?=} authResponseIsValid\n * @param {?=} decoded_id_token\n */\nconstructor(\npublic access_token = '',\npublic id_token = '',\npublic authResponseIsValid = false,\npublic decoded_id_token: any\n    ) {}\n}\n\nfunction ValidateStateResult_tsickle_Closure_declarations() {\n/** @type {?} */\nValidateStateResult.prototype.access_token;\n/** @type {?} */\nValidateStateResult.prototype.id_token;\n/** @type {?} */\nValidateStateResult.prototype.authResponseIsValid;\n/** @type {?} */\nValidateStateResult.prototype.decoded_id_token;\n}\n\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { JwtKeys } from '../models/jwtkeys';\nexport class StateValidationService {\nprivate oidcSecurityValidation: OidcSecurityValidation;\n/**\n * @param {?} authConfiguration\n * @param {?} oidcSecurityCommon\n * @param {?} authWellKnownEndpoints\n */\nconstructor(\nprivate authConfiguration: AuthConfiguration,\npublic oidcSecurityCommon: OidcSecurityCommon,\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints\n    ) {\n        this.oidcSecurityValidation = new OidcSecurityValidation(\n            this.oidcSecurityCommon\n        );\n    }\n/**\n * @param {?} result\n * @param {?} jwtKeys\n * @return {?}\n */\npublic validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        const /** @type {?} */ toReturn = new ValidateStateResult('', '', false, {});\n\n        if (\n            !this.oidcSecurityValidation.validateStateFromHashCallback(\n                result.state,\n                this.oidcSecurityCommon.authStateControl\n            )\n        ) {\n            this.oidcSecurityCommon.logWarning(\n                'authorizedCallback incorrect state'\n            );\n            return toReturn;\n        }\n\n        if (this.authConfiguration.response_type === 'id_token token') {\n            toReturn.access_token = result.access_token;\n        }\n        toReturn.id_token = result.id_token;\n\n        toReturn.decoded_id_token = this.oidcSecurityValidation.getPayloadFromToken(\n            toReturn.id_token,\n            false\n        );\n\n        if (\n            !this.oidcSecurityValidation.validate_signature_id_token(\n                toReturn.id_token,\n                jwtKeys\n            )\n        ) {\n            this.oidcSecurityCommon.logDebug(\n                'authorizedCallback Signature validation failed id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_nonce(\n                toReturn.decoded_id_token,\n                this.oidcSecurityCommon.authNonce\n            )\n        ) {\n            this.oidcSecurityCommon.logWarning(\n                'authorizedCallback incorrect nonce'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_required_id_token(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.oidcSecurityCommon.logDebug(\n                'authorizedCallback Validation, one of the REQUIRED properties missing from id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\n                toReturn.decoded_id_token,\n                this.authConfiguration\n                    .max_id_token_iat_offset_allowed_in_seconds\n            )\n        ) {\n            this.oidcSecurityCommon.logWarning(\n                'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iss(\n                toReturn.decoded_id_token,\n                this.authWellKnownEndpoints.issuer\n            )\n        ) {\n            this.oidcSecurityCommon.logWarning(\n                'authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_aud(\n                toReturn.decoded_id_token,\n                this.authConfiguration.client_id\n            )\n        ) {\n            this.oidcSecurityCommon.logWarning(\n                'authorizedCallback incorrect aud'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_exp_not_expired(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.oidcSecurityCommon.logWarning(\n                'authorizedCallback token expired'\n            );\n            return toReturn;\n        }\n\n        // flow id_token token\n        if (this.authConfiguration.response_type !== 'id_token token') {\n            toReturn.authResponseIsValid = true;\n            this.successful_validation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\n                toReturn.access_token,\n                toReturn.decoded_id_token.at_hash\n            ) ||\n            !toReturn.access_token\n        ) {\n            this.oidcSecurityCommon.logWarning(\n                'authorizedCallback incorrect at_hash'\n            );\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        this.successful_validation();\n        return toReturn;\n    }\n/**\n * @return {?}\n */\nprivate successful_validation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.oidcSecurityCommon.logDebug(\n            'AuthorizedCallback token(s) validated, continue'\n        );\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: OidcSecurityCommon, },\n{type: AuthWellKnownEndpoints, },\n];\n}\n\nfunction StateValidationService_tsickle_Closure_declarations() {\n/** @type {?} */\nStateValidationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStateValidationService.ctorParameters;\n/** @type {?} */\nStateValidationService.prototype.oidcSecurityValidation;\n/** @type {?} */\nStateValidationService.prototype.authConfiguration;\n/** @type {?} */\nStateValidationService.prototype.oidcSecurityCommon;\n/** @type {?} */\nStateValidationService.prototype.authWellKnownEndpoints;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n    AuthConfiguration,\r\n    OpenIDImplicitFlowConfiguration\r\n} from '../modules/auth.configuration';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { AuthorizationResult } from '../models/authorization-result.enum';\r\nimport { UriEncoder } from './uri-encoder';\r\nimport { timer } from 'rxjs/observable/timer';\r\nimport { pluck, take, catchError, timeInterval } from 'rxjs/operators';\r\nimport { StateValidationService } from './oidc-security-state-validation.service';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nexport class OidcSecurityService {\r\n     onModuleSetup: EventEmitter<any> = new EventEmitter<any>(true);\r\n    \r\n    onAuthorizationResult: EventEmitter<AuthorizationResult> = new EventEmitter<\r\n        AuthorizationResult\r\n    >(true);\r\n\r\n    checkSessionChanged: boolean;\r\n    moduleSetup = false;\nprivate _isAuthorized = new BehaviorSubject<boolean>(false);\nprivate _isAuthorizedValue: boolean;\nprivate lastUserData: any = undefined;\nprivate _userData = new BehaviorSubject<any>('');\nprivate oidcSecurityValidation: OidcSecurityValidation;\nprivate authWellKnownEndpointsLoaded = false;\nprivate runTokenValidationRunning: boolean;\n/**\n * @param {?} platformId\n * @param {?} http\n * @param {?} stateValidationService\n * @param {?} authConfiguration\n * @param {?} router\n * @param {?} oidcSecurityCheckSession\n * @param {?} oidcSecuritySilentRenew\n * @param {?} oidcSecurityUserService\n * @param {?} oidcSecurityCommon\n * @param {?} authWellKnownEndpoints\n */\nconstructor(\nprivate platformId: Object,\nprivate http: HttpClient,\nprivate stateValidationService: StateValidationService,\nprivate authConfiguration: AuthConfiguration,\nprivate router: Router,\nprivate oidcSecurityCheckSession: OidcSecurityCheckSession,\nprivate oidcSecuritySilentRenew: OidcSecuritySilentRenew,\nprivate oidcSecurityUserService: OidcSecurityUserService,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ) {}\n/**\n * @param {?} openIDImplicitFlowConfiguration\n * @return {?}\n */\nsetupModule(\r\n        openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration\r\n    ): void {\r\n        this.authConfiguration.init(openIDImplicitFlowConfiguration);\r\n        this.oidcSecurityValidation = new OidcSecurityValidation(\r\n            this.oidcSecurityCommon\r\n        );\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\r\n            this.onCheckSessionChanged();\r\n        });\r\n        this.authWellKnownEndpoints.onWellKnownEndpointsLoaded.subscribe(() => {\r\n            this.onWellKnownEndpointsLoaded();\r\n        });\r\n        this._userData.subscribe(() => {\r\n            this.onUserDataChanged();\r\n        });\r\n\r\n        this.oidcSecurityCommon.setupModule();\r\n\r\n        const /** @type {?} */ userData = this.oidcSecurityCommon.userData;\r\n        if (userData) {\r\n            this.setUserData(userData);\r\n        }\r\n\r\n        const /** @type {?} */ isAuthorized = this.oidcSecurityCommon.isAuthorized;\r\n        if (isAuthorized) {\r\n            this.setIsAuthorized(isAuthorized);\r\n\r\n            // Start the silent renew\r\n            this.runTokenValidation();\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug(\r\n            'STS server: ' + this.authConfiguration.stsServer\r\n        );\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            // Client only code.\r\n            this.authWellKnownEndpoints.onWellKnownEndpointsLoaded.subscribe(\r\n                () => {\r\n                    this.moduleSetup = true;\r\n                    this.onModuleSetup.emit();\r\n\r\n                    if (this.authConfiguration.silent_renew) {\r\n                        this.oidcSecuritySilentRenew.initRenew();\r\n                    }\r\n\r\n                    if (\r\n                        this.authConfiguration.start_checksession &&\r\n                        !this.oidcSecurityCheckSession.doesSessionExist()\r\n                    ) {\r\n                        this.oidcSecurityCheckSession.init().subscribe(() => {\r\n                            this.oidcSecurityCheckSession.pollServerSession(\r\n                                this.authConfiguration.client_id\r\n                            );\r\n                        });\r\n                    }\r\n                }\r\n            );\r\n\r\n            this.authWellKnownEndpoints.setupModule();\r\n        } else {\r\n            this.moduleSetup = true;\r\n            this.onModuleSetup.emit();\r\n        }\r\n    }\n/**\n * @return {?}\n */\ngetUserData(): Observable<any> {\r\n        return this._userData.asObservable();\r\n    }\n/**\n * @return {?}\n */\ngetIsAuthorized(): Observable<boolean> {\r\n        return this._isAuthorized.asObservable();\r\n    }\n/**\n * @return {?}\n */\ngetToken(): any {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        const /** @type {?} */ token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\n/**\n * @return {?}\n */\ngetIdToken(): any {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        const /** @type {?} */ token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\n/**\n * @param {?=} encode\n * @return {?}\n */\ngetPayloadFromIdToken(encode = false): any {\r\n        const /** @type {?} */ token = this.getIdToken();\r\n        return this.oidcSecurityValidation.getPayloadFromToken(token, encode);\r\n    }\n/**\n * @param {?} state\n * @return {?}\n */\nsetState(state: string): void {\r\n        this.oidcSecurityCommon.authStateControl = state;\r\n    }\n/**\n * @return {?}\n */\ngetState(): string {\r\n        return this.oidcSecurityCommon.authStateControl;\r\n    }\n/**\n * @param {?} params\n * @return {?}\n */\nsetCustomRequestParameters(params: {\r\n        [key: string]: string | number | boolean;\r\n    }) {\r\n        this.oidcSecurityCommon.customRequestParams = params;\r\n    }\n/**\n * @return {?}\n */\nauthorize() {\r\n        const /** @type {?} */ data = this.oidcSecurityCommon.wellKnownEndpoints;\r\n        if (data) {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.oidcSecurityCommon.logError(\r\n                'Well known endpoints must be loaded before user can login!'\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (\r\n            !this.oidcSecurityValidation.config_validate_response_type(\r\n                this.authConfiguration.response_type\r\n            )\r\n        ) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        let /** @type {?} */ state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const /** @type {?} */ nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.oidcSecurityCommon.logDebug(\r\n            'AuthorizedController created. local state: ' +\r\n                this.oidcSecurityCommon.authStateControl\r\n        );\r\n\r\n        const /** @type {?} */ url = this.createAuthorizeUrl(\r\n            nonce,\r\n            state,\r\n            this.authWellKnownEndpoints.authorization_endpoint\r\n        );\r\n        window.location.href = url;\r\n    }\n/**\n * @param {?=} hash\n * @return {?}\n */\nauthorizedCallback(hash?: string) {\r\n        const /** @type {?} */ silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const /** @type {?} */ isRenewProcess = silentRenew === 'running';\r\n\r\n        this.oidcSecurityCommon.logDebug(\r\n            'BEGIN authorizedCallback, no auth data'\r\n        );\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        const /** @type {?} */ result: any = hash\r\n            .split('&')\r\n            .reduce(function(resultData: any, item: string) {\r\n                const /** @type {?} */ parts = item.split('=');\r\n                resultData[parts[0]] = parts[1];\r\n                return resultData;\r\n            }, {});\r\n\r\n        this.oidcSecurityCommon.authResult = result;\r\n        this.oidcSecurityCommon.logDebug(result);\r\n        this.oidcSecurityCommon.logDebug(\r\n            'authorizedCallback created, begin token validation'\r\n        );\r\n\r\n        this.getSigningKeys().subscribe(jwtKeys => {\r\n            const /** @type {?} */ validationResult = this.getValidatedStateResult(\r\n                result,\r\n                jwtKeys\r\n            );\r\n\r\n            this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n            if (validationResult.authResponseIsValid) {\r\n                this.setAuthorizationData(\r\n                    validationResult.access_token,\r\n                    validationResult.id_token\r\n                );\r\n                if (this.authConfiguration.auto_userinfo) {\r\n                    this.getUserinfo(\r\n                        isRenewProcess,\r\n                        result,\r\n                        validationResult.id_token,\r\n                        validationResult.decoded_id_token\r\n                    ).subscribe(response => {\r\n                        if (response) {\r\n                            if (\r\n                                this.authConfiguration\r\n                                    .trigger_authorization_result_event\r\n                            ) {\r\n                                this.onAuthorizationResult.emit(\r\n                                    AuthorizationResult.authorized\r\n                                );\r\n                            } else {\r\n                                this.router.navigate([\r\n                                    this.authConfiguration.post_login_route\r\n                                ]);\r\n                            }\r\n                        } else {\r\n                            if (\r\n                                this.authConfiguration\r\n                                    .trigger_authorization_result_event\r\n                            ) {\r\n                                this.onAuthorizationResult.emit(\r\n                                    AuthorizationResult.unauthorized\r\n                                );\r\n                            } else {\r\n                                this.router.navigate([\r\n                                    this.authConfiguration.unauthorized_route\r\n                                ]);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n\r\n                    // userData is set to the id_token decoded, auto get user data set to false\r\n                    this.oidcSecurityUserService.userData = validationResult.decoded_id_token;\r\n                    this.setUserData(this.oidcSecurityUserService.userData);\r\n                    this.runTokenValidation();\r\n                    if (\r\n                        this.authConfiguration\r\n                            .trigger_authorization_result_event\r\n                    ) {\r\n                        this.onAuthorizationResult.emit(\r\n                            AuthorizationResult.authorized\r\n                        );\r\n                    } else {\r\n                        this.router.navigate([\r\n                            this.authConfiguration.post_login_route\r\n                        ]);\r\n                    }\r\n                }\r\n            } else {\r\n                // something went wrong\r\n                this.oidcSecurityCommon.logDebug(\r\n                    'authorizedCallback, token(s) validation failed, resetting'\r\n                );\r\n                this.resetAuthorizationData(false);\r\n                if (this.authConfiguration.trigger_authorization_result_event) {\r\n                    this.onAuthorizationResult.emit(\r\n                        AuthorizationResult.unauthorized\r\n                    );\r\n                } else {\r\n                    this.router.navigate([\r\n                        this.authConfiguration.unauthorized_route\r\n                    ]);\r\n                }\r\n            }\r\n        });\r\n    }\n/**\n * @param {?=} isRenewProcess\n * @param {?=} result\n * @param {?=} id_token\n * @param {?=} decoded_id_token\n * @return {?}\n */\ngetUserinfo(\r\n        isRenewProcess = false,\r\n        result?: any,\r\n        id_token?: any,\r\n        decoded_id_token?: any\r\n    ): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.authResult;\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\r\n        decoded_id_token = decoded_id_token\r\n            ? decoded_id_token\r\n            : this.oidcSecurityValidation.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (this.authConfiguration.response_type === 'id_token token') {\r\n                if (isRenewProcess) {\r\n                    this.oidcSecurityCommon.sessionState = result.session_state;\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService\r\n                        .initUserData()\r\n                        .subscribe(() => {\r\n                            this.oidcSecurityCommon.logDebug(\r\n                                'authorizedCallback id_token token flow'\r\n                            );\r\n                            if (\r\n                                this.oidcSecurityValidation.validate_userdata_sub_id_token(\r\n                                    decoded_id_token.sub,\r\n                                    this.oidcSecurityUserService.userData.sub\r\n                                )\r\n                            ) {\r\n                                this.setUserData(\r\n                                    this.oidcSecurityUserService.userData\r\n                                );\r\n                                this.oidcSecurityCommon.logDebug(\r\n                                    this.oidcSecurityCommon.accessToken\r\n                                );\r\n                                this.oidcSecurityCommon.logDebug(\r\n                                    this.oidcSecurityUserService.userData\r\n                                );\r\n\r\n                                this.oidcSecurityCommon.sessionState =\r\n                                    result.session_state;\r\n\r\n                                this.runTokenValidation();\r\n                                observer.next(true);\r\n                            } else {\r\n                                // something went wrong, userdata sub does not match that from id_token\r\n                                this.oidcSecurityCommon.logWarning(\r\n                                    'authorizedCallback, User data sub does not match sub in id_token'\r\n                                );\r\n                                this.oidcSecurityCommon.logDebug(\r\n                                    'authorizedCallback, token(s) validation failed, resetting'\r\n                                );\r\n                                this.resetAuthorizationData(false);\r\n                                observer.next(false);\r\n                            }\r\n                            observer.complete();\r\n                        });\r\n                }\r\n            } else {\r\n                // flow id_token\r\n                this.oidcSecurityCommon.logDebug(\r\n                    'authorizedCallback id_token flow'\r\n                );\r\n                this.oidcSecurityCommon.logDebug(\r\n                    this.oidcSecurityCommon.accessToken\r\n                );\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.userData = decoded_id_token;\r\n                this.setUserData(this.oidcSecurityUserService.userData);\r\n\r\n                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                if (!isRenewProcess) {\r\n                    this.runTokenValidation();\r\n                }\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\n/**\n * @return {?}\n */\nlogoff() {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.authWellKnownEndpoints.end_session_endpoint) {\r\n            const /** @type {?} */ end_session_endpoint = this.authWellKnownEndpoints\r\n                .end_session_endpoint;\r\n            const /** @type {?} */ id_token_hint = this.oidcSecurityCommon.idToken;\r\n            const /** @type {?} */ url = this.createEndSessionUrl(\r\n                end_session_endpoint,\r\n                id_token_hint\r\n            );\r\n\r\n            this.resetAuthorizationData(false);\r\n\r\n            if (\r\n                this.authConfiguration.start_checksession &&\r\n                this.checkSessionChanged\r\n            ) {\r\n                this.oidcSecurityCommon.logDebug(\r\n                    'only local login cleaned up, server session has changed'\r\n                );\r\n            } else {\r\n                window.location.href = url;\r\n            }\r\n        } else {\r\n            this.resetAuthorizationData(false);\r\n            this.oidcSecurityCommon.logDebug(\r\n                'only local login cleaned up, no end_session_endpoint'\r\n            );\r\n        }\r\n    }\n/**\n * @return {?}\n */\nrefreshSession() {\r\n        this.oidcSecurityCommon.logDebug('BEGIN refresh session Authorize');\r\n\r\n        let /** @type {?} */ state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const /** @type {?} */ nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.oidcSecurityCommon.logDebug(\r\n            'RefreshSession created. adding myautostate: ' +\r\n                this.oidcSecurityCommon.authStateControl\r\n        );\r\n\r\n        const /** @type {?} */ url = this.createAuthorizeUrl(\r\n            nonce,\r\n            state,\r\n            this.authWellKnownEndpoints.authorization_endpoint,\r\n            'none'\r\n        );\r\n\r\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\r\n        this.oidcSecuritySilentRenew.startRenew(url);\r\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nhandleError(error: any) {\r\n        this.oidcSecurityCommon.logError(error);\r\n        if (error.status === 403 || error.status === '403') {\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(\r\n                    AuthorizationResult.unauthorized\r\n                );\r\n            } else {\r\n                this.router.navigate([this.authConfiguration.forbidden_route]);\r\n            }\r\n        } else if (error.status === 401 || error.status === '401') {\r\n            const /** @type {?} */ silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n\r\n            this.resetAuthorizationData(!!silentRenew);\r\n\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(\r\n                    AuthorizationResult.unauthorized\r\n                );\r\n            } else {\r\n                this.router.navigate([\r\n                    this.authConfiguration.unauthorized_route\r\n                ]);\r\n            }\r\n        }\r\n    }\n/**\n * @param {?} result\n * @param {?} jwtKeys\n * @return {?}\n */\nprivate getValidatedStateResult(\r\n        result: any,\r\n        jwtKeys: JwtKeys\r\n    ): ValidateStateResult {\r\n        if (result.error) {\r\n            return new ValidateStateResult('', '', false, {});\r\n        }\r\n\r\n        return this.stateValidationService.validateState(result, jwtKeys);\r\n    }\n/**\n * @param {?} userData\n * @return {?}\n */\nprivate setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.userData = userData;\r\n        this._userData.next(userData);\r\n    }\n/**\n * @param {?} isAuthorized\n * @return {?}\n */\nprivate setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorizedValue = isAuthorized;\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\n/**\n * @param {?} access_token\n * @param {?} id_token\n * @return {?}\n */\nprivate setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.accessToken !== '') {\r\n            this.oidcSecurityCommon.accessToken = '';\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug(access_token);\r\n        this.oidcSecurityCommon.logDebug(id_token);\r\n        this.oidcSecurityCommon.logDebug(\r\n            'storing to storage, getting the roles'\r\n        );\r\n        this.oidcSecurityCommon.accessToken = access_token;\r\n        this.oidcSecurityCommon.idToken = id_token;\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.isAuthorized = true;\r\n    }\n/**\n * @param {?} nonce\n * @param {?} state\n * @param {?} authorization_endpoint\n * @param {?=} prompt\n * @return {?}\n */\nprivate createAuthorizeUrl(\r\n        nonce: string,\r\n        state: string,\r\n        authorization_endpoint: string,\r\n        prompt?: string\r\n    ): string {\r\n        const /** @type {?} */ urlParts = authorization_endpoint.split('?');\r\n        const /** @type {?} */ authorizationUrl = urlParts[0];\r\n        let /** @type {?} */ params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder()\r\n        });\r\n        params = params.set('client_id', this.authConfiguration.client_id);\r\n        params = params.append(\r\n            'redirect_uri',\r\n            this.authConfiguration.redirect_url\r\n        );\r\n        params = params.append(\r\n            'response_type',\r\n            this.authConfiguration.response_type\r\n        );\r\n        params = params.append('scope', this.authConfiguration.scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n        if (this.authConfiguration.hd_param) {\r\n            params = params.append('hd', this.authConfiguration.hd_param);\r\n        }\r\n\r\n        const /** @type {?} */ customParams = Object.assign(\r\n            {},\r\n            this.oidcSecurityCommon.customRequestParams\r\n        );\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params = params.append(key, customParams[key].toString());\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\n/**\n * @param {?} end_session_endpoint\n * @param {?} id_token_hint\n * @return {?}\n */\nprivate createEndSessionUrl(\r\n        end_session_endpoint: string,\r\n        id_token_hint: string\r\n    ) {\r\n        const /** @type {?} */ urlParts = end_session_endpoint.split('?');\r\n\r\n        const /** @type {?} */ authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let /** @type {?} */ params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder()\r\n        });\r\n        params = params.set('id_token_hint', id_token_hint);\r\n        params = params.append(\r\n            'post_logout_redirect_uri',\r\n            this.authConfiguration.post_logout_redirect_uri\r\n        );\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\n/**\n * @param {?} isRenewProcess\n * @return {?}\n */\nprivate resetAuthorizationData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            if (this.authConfiguration.auto_userinfo) {\r\n                // Clear user data. Fixes #97.\r\n                this.setUserData('');\r\n            }\r\n            this.setIsAuthorized(false);\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate onCheckSessionChanged() {\r\n        this.oidcSecurityCommon.logDebug('onCheckSessionChanged');\r\n        this.checkSessionChanged = true;\r\n    }\n/**\n * @return {?}\n */\nprivate onWellKnownEndpointsLoaded() {\r\n        this.oidcSecurityCommon.logDebug('onWellKnownEndpointsLoaded');\r\n        this.authWellKnownEndpointsLoaded = true;\r\n    }\n/**\n * @return {?}\n */\nprivate onUserDataChanged() {\r\n        this.oidcSecurityCommon.logDebug(\r\n            `onUserDataChanged: last = ${this.lastUserData}, new = ${\r\n                this._userData.value\r\n            }`\r\n        );\r\n\r\n        if (this.lastUserData && !this._userData.value) {\r\n            this.oidcSecurityCommon.logDebug(\r\n                'onUserDataChanged: Logout detected.'\r\n            );\r\n            // TODO should we have an action here\r\n        }\r\n        this.lastUserData = this._userData.value;\r\n    }\n/**\n * @return {?}\n */\nprivate getSigningKeys(): Observable<JwtKeys> {\r\n        this.oidcSecurityCommon.logDebug(\r\n            'jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri\r\n        );\r\n        return this.http\r\n            .get<JwtKeys>(this.authWellKnownEndpoints.jwks_uri)\r\n            .pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleErrorGetSigningKeys(error: Response | any) {\r\n        let /** @type {?} */ errMsg: string;\r\n        if (error instanceof Response) {\r\n            const /** @type {?} */ body = error.json() || {};\r\n            const /** @type {?} */ err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.error(errMsg);\r\n        return Observable.throw(errMsg);\r\n    }\n/**\n * @return {?}\n */\nprivate runTokenValidation() {\r\n        if (this.runTokenValidationRunning) {\r\n            return;\r\n        }\r\n        this.runTokenValidationRunning = true;\r\n\r\n        const /** @type {?} */ source = timer(5000, 3000).pipe(\r\n            timeInterval(),\r\n            pluck('interval'),\r\n            take(10000)\r\n        );\r\n\r\n        source.subscribe(\r\n            () => {\r\n                if (this._userData.value) {\r\n                    if (\r\n                        this.oidcSecurityValidation.isTokenExpired(\r\n                            this.oidcSecurityCommon.idToken,\r\n                            this.authConfiguration\r\n                                .silent_renew_offset_in_seconds\r\n                        )\r\n                    ) {\r\n                        this.oidcSecurityCommon.logDebug(\r\n                            'IsAuthorized: id_token isTokenExpired, start silent renew if active'\r\n                        );\r\n\r\n                        if (this.authConfiguration.silent_renew) {\r\n                            this.refreshSession();\r\n                        } else {\r\n                            this.resetAuthorizationData(false);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            (err: any) => {\r\n                this.oidcSecurityCommon.logError('Error: ' + err);\r\n            },\r\n            () => {\r\n                this.oidcSecurityCommon.logDebug('Completed');\r\n            }\r\n        );\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n{type: HttpClient, },\n{type: StateValidationService, },\n{type: AuthConfiguration, },\n{type: Router, },\n{type: OidcSecurityCheckSession, },\n{type: OidcSecuritySilentRenew, },\n{type: OidcSecurityUserService, },\n{type: OidcSecurityCommon, },\n{type: AuthWellKnownEndpoints, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onModuleSetup': [{ type: Output },],\n'onAuthorizationResult': [{ type: Output },],\n};\n}\n\nfunction OidcSecurityService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityService.ctorParameters;\n/** @type {?} */\nOidcSecurityService.propDecorators;\n/** @type {?} */\nOidcSecurityService.prototype.onModuleSetup;\n/** @type {?} */\nOidcSecurityService.prototype.onAuthorizationResult;\n/** @type {?} */\nOidcSecurityService.prototype.checkSessionChanged;\n/** @type {?} */\nOidcSecurityService.prototype.moduleSetup;\n/** @type {?} */\nOidcSecurityService.prototype._isAuthorized;\n/** @type {?} */\nOidcSecurityService.prototype._isAuthorizedValue;\n/** @type {?} */\nOidcSecurityService.prototype.lastUserData;\n/** @type {?} */\nOidcSecurityService.prototype._userData;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityValidation;\n/** @type {?} */\nOidcSecurityService.prototype.authWellKnownEndpointsLoaded;\n/** @type {?} */\nOidcSecurityService.prototype.runTokenValidationRunning;\n/** @type {?} */\nOidcSecurityService.prototype.platformId;\n/** @type {?} */\nOidcSecurityService.prototype.http;\n/** @type {?} */\nOidcSecurityService.prototype.stateValidationService;\n/** @type {?} */\nOidcSecurityService.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityService.prototype.router;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityCheckSession;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecuritySilentRenew;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityUserService;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityService.prototype.authWellKnownEndpoints;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { OidcSecurityService } from '../services/oidc.security.service';\nimport { AuthConfiguration, DefaultConfiguration } from './auth.configuration';\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\nimport {\n    OidcSecurityStorage,\n    BrowserStorage\n} from '../services/oidc.security.storage';\nimport { AuthWellKnownEndpoints } from '../services/auth.well-known-endpoints';\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\nexport class AuthModule {\n/**\n * @param {?=} token\n * @return {?}\n */\nstatic forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                DefaultConfiguration,\n                AuthWellKnownEndpoints,\n                StateValidationService,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AuthModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthModule.ctorParameters;\n}\n\n\nexport interface Type<T> extends Function {\n    new (...args: any[]): T;\n}\n\nexport interface Token {\n    storage?: Type<any>;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","export { audit } from './operators/audit';\nexport { auditTime } from './operators/auditTime';\nexport { buffer } from './operators/buffer';\nexport { bufferCount } from './operators/bufferCount';\nexport { bufferTime } from './operators/bufferTime';\nexport { bufferToggle } from './operators/bufferToggle';\nexport { bufferWhen } from './operators/bufferWhen';\nexport { catchError } from './operators/catchError';\nexport { combineAll } from './operators/combineAll';\nexport { combineLatest } from './operators/combineLatest';\nexport { concat } from './operators/concat';\nexport { concatAll } from './operators/concatAll';\nexport { concatMap } from './operators/concatMap';\nexport { concatMapTo } from './operators/concatMapTo';\nexport { count } from './operators/count';\nexport { debounce } from './operators/debounce';\nexport { debounceTime } from './operators/debounceTime';\nexport { defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { delay } from './operators/delay';\nexport { delayWhen } from './operators/delayWhen';\nexport { dematerialize } from './operators/dematerialize';\nexport { distinct } from './operators/distinct';\nexport { distinctUntilChanged } from './operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './operators/distinctUntilKeyChanged';\nexport { elementAt } from './operators/elementAt';\nexport { every } from './operators/every';\nexport { exhaust } from './operators/exhaust';\nexport { exhaustMap } from './operators/exhaustMap';\nexport { expand } from './operators/expand';\nexport { filter } from './operators/filter';\nexport { finalize } from './operators/finalize';\nexport { find } from './operators/find';\nexport { findIndex } from './operators/findIndex';\nexport { first } from './operators/first';\nexport { groupBy } from './operators/groupBy';\nexport { ignoreElements } from './operators/ignoreElements';\nexport { isEmpty } from './operators/isEmpty';\nexport { last } from './operators/last';\nexport { map } from './operators/map';\nexport { mapTo } from './operators/mapTo';\nexport { materialize } from './operators/materialize';\nexport { max } from './operators/max';\nexport { merge } from './operators/merge';\nexport { mergeAll } from './operators/mergeAll';\nexport { mergeMap } from './operators/mergeMap';\nexport { mergeMap as flatMap } from './operators/mergeMap';\nexport { mergeMapTo } from './operators/mergeMapTo';\nexport { mergeScan } from './operators/mergeScan';\nexport { min } from './operators/min';\nexport { multicast } from './operators/multicast';\nexport { observeOn } from './operators/observeOn';\nexport { onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { pairwise } from './operators/pairwise';\nexport { partition } from './operators/partition';\nexport { pluck } from './operators/pluck';\nexport { publish } from './operators/publish';\nexport { publishBehavior } from './operators/publishBehavior';\nexport { publishLast } from './operators/publishLast';\nexport { publishReplay } from './operators/publishReplay';\nexport { race } from './operators/race';\nexport { reduce } from './operators/reduce';\nexport { repeat } from './operators/repeat';\nexport { repeatWhen } from './operators/repeatWhen';\nexport { retry } from './operators/retry';\nexport { retryWhen } from './operators/retryWhen';\nexport { refCount } from './operators/refCount';\nexport { sample } from './operators/sample';\nexport { sampleTime } from './operators/sampleTime';\nexport { scan } from './operators/scan';\nexport { sequenceEqual } from './operators/sequenceEqual';\nexport { share } from './operators/share';\nexport { shareReplay } from './operators/shareReplay';\nexport { single } from './operators/single';\nexport { skip } from './operators/skip';\nexport { skipLast } from './operators/skipLast';\nexport { skipUntil } from './operators/skipUntil';\nexport { skipWhile } from './operators/skipWhile';\nexport { startWith } from './operators/startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nexport { switchAll } from './operators/switchAll';\nexport { switchMap } from './operators/switchMap';\nexport { switchMapTo } from './operators/switchMapTo';\nexport { take } from './operators/take';\nexport { takeLast } from './operators/takeLast';\nexport { takeUntil } from './operators/takeUntil';\nexport { takeWhile } from './operators/takeWhile';\nexport { tap } from './operators/tap';\nexport { throttle } from './operators/throttle';\nexport { throttleTime } from './operators/throttleTime';\nexport { timeInterval } from './operators/timeInterval';\nexport { timeout } from './operators/timeout';\nexport { timeoutWith } from './operators/timeoutWith';\nexport { timestamp } from './operators/timestamp';\nexport { toArray } from './operators/toArray';\nexport { window } from './operators/window';\nexport { windowCount } from './operators/windowCount';\nexport { windowTime } from './operators/windowTime';\nexport { windowToggle } from './operators/windowToggle';\nexport { windowWhen } from './operators/windowWhen';\nexport { withLatestFrom } from './operators/withLatestFrom';\nexport { zip } from './operators/zip';\nexport { zipAll } from './operators/zipAll';\n","import { Injectable } from '@angular/core';\nexport class DefaultConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n    // or if it contains additional audiences not trusted by the Client.\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    // For some oidc, we require resource identifier to be provided along with the request.\r\n    resource = '';\r\n    scope = 'openid email profile';\r\n    // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\r\n    hd_param = '';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = true;\r\n    silent_renew_offset_in_seconds = 0;\r\n    post_login_route = '/';\r\n    // HTTP 403\r\n    forbidden_route = '/forbidden';\r\n    // HTTP 401\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n    auto_clean_state_after_authentication: true;\r\n    trigger_authorization_result_event: false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n    override_well_known_configuration = false;\r\n    override_well_known_configuration_url = 'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\r\n}\n\nfunction DefaultConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultConfiguration.prototype.stsServer;\n/** @type {?} */\nDefaultConfiguration.prototype.redirect_url;\n/** @type {?} */\nDefaultConfiguration.prototype.client_id;\n/** @type {?} */\nDefaultConfiguration.prototype.response_type;\n/** @type {?} */\nDefaultConfiguration.prototype.resource;\n/** @type {?} */\nDefaultConfiguration.prototype.scope;\n/** @type {?} */\nDefaultConfiguration.prototype.hd_param;\n/** @type {?} */\nDefaultConfiguration.prototype.post_logout_redirect_uri;\n/** @type {?} */\nDefaultConfiguration.prototype.start_checksession;\n/** @type {?} */\nDefaultConfiguration.prototype.silent_renew;\n/** @type {?} */\nDefaultConfiguration.prototype.silent_renew_offset_in_seconds;\n/** @type {?} */\nDefaultConfiguration.prototype.post_login_route;\n/** @type {?} */\nDefaultConfiguration.prototype.forbidden_route;\n/** @type {?} */\nDefaultConfiguration.prototype.unauthorized_route;\n/** @type {?} */\nDefaultConfiguration.prototype.auto_userinfo;\n/** @type {?} */\nDefaultConfiguration.prototype.auto_clean_state_after_authentication;\n/** @type {?} */\nDefaultConfiguration.prototype.trigger_authorization_result_event;\n/** @type {?} */\nDefaultConfiguration.prototype.log_console_warning_active;\n/** @type {?} */\nDefaultConfiguration.prototype.log_console_debug_active;\n/** @type {?} */\nDefaultConfiguration.prototype.max_id_token_iat_offset_allowed_in_seconds;\n/** @type {?} */\nDefaultConfiguration.prototype.override_well_known_configuration;\n/** @type {?} */\nDefaultConfiguration.prototype.override_well_known_configuration_url;\n/** @type {?} */\nDefaultConfiguration.prototype.storage;\n}\n\nexport class OpenIDImplicitFlowConfiguration {\r\n    stsServer: string;\r\n    redirect_url: string;\r\n    client_id: string;\r\n    response_type: string;\r\n    resource: string;\r\n    scope: string;\r\n    hd_param: string;\r\n    post_logout_redirect_uri: string;\r\n    start_checksession: boolean;\r\n    silent_renew: boolean;\r\n    silent_renew_offset_in_seconds: number;\r\n    post_login_route: string;\r\n    forbidden_route: string;\r\n    unauthorized_route: string;\r\n    auto_userinfo: boolean;\r\n    auto_clean_state_after_authentication: boolean;\r\n    trigger_authorization_result_event: boolean;\r\n    log_console_warning_active: boolean;\r\n    log_console_debug_active: boolean;\r\n    max_id_token_iat_offset_allowed_in_seconds: number;\r\n    override_well_known_configuration: boolean;\r\n    override_well_known_configuration_url: string;\r\n    storage: any;\r\n}\n\nfunction OpenIDImplicitFlowConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.stsServer;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.redirect_url;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.client_id;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.response_type;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.resource;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.scope;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.hd_param;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.post_logout_redirect_uri;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.start_checksession;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.silent_renew;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.silent_renew_offset_in_seconds;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.post_login_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.forbidden_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.unauthorized_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.auto_userinfo;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.auto_clean_state_after_authentication;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.trigger_authorization_result_event;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.log_console_warning_active;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.log_console_debug_active;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.max_id_token_iat_offset_allowed_in_seconds;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.override_well_known_configuration;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.override_well_known_configuration_url;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.storage;\n}\n\nexport class AuthConfiguration {\nprivate openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration;\n/**\n * @return {?}\n */\nget stsServer(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.stsServer ||\r\n            this.defaultConfig.stsServer\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget redirect_url(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.redirect_url ||\r\n            this.defaultConfig.redirect_url\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget client_id(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.client_id ||\r\n            this.defaultConfig.client_id\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget response_type(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.response_type ||\r\n            this.defaultConfig.response_type\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget resource(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.resource ||\r\n            this.defaultConfig.resource\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget scope(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.scope ||\r\n            this.defaultConfig.scope\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget hd_param(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.hd_param ||\r\n            this.defaultConfig.hd_param\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget post_logout_redirect_uri(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.post_logout_redirect_uri ||\r\n            this.defaultConfig.post_logout_redirect_uri\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget start_checksession(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.start_checksession !==\r\n            undefined\r\n            ? this.openIDImplicitFlowConfiguration.start_checksession\r\n            : this.defaultConfig.start_checksession;\r\n    }\n/**\n * @return {?}\n */\nget silent_renew(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.silent_renew !== undefined\r\n            ? this.openIDImplicitFlowConfiguration.silent_renew\r\n            : this.defaultConfig.silent_renew;\r\n    }\n/**\n * @return {?}\n */\nget silent_renew_offset_in_seconds(): number {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration\r\n                .silent_renew_offset_in_seconds ||\r\n            this.defaultConfig.silent_renew_offset_in_seconds\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget post_login_route(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.post_login_route ||\r\n            this.defaultConfig.post_login_route\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget forbidden_route(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.forbidden_route ||\r\n            this.defaultConfig.forbidden_route\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget unauthorized_route(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.unauthorized_route ||\r\n            this.defaultConfig.unauthorized_route\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget auto_userinfo(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.auto_userinfo !== undefined\r\n            ? this.openIDImplicitFlowConfiguration.auto_userinfo\r\n            : this.defaultConfig.auto_userinfo;\r\n    }\n/**\n * @return {?}\n */\nget auto_clean_state_after_authentication(): boolean {\r\n        return this.openIDImplicitFlowConfiguration\r\n            .auto_clean_state_after_authentication !== undefined\r\n            ? this.openIDImplicitFlowConfiguration\r\n                  .auto_clean_state_after_authentication\r\n            : this.defaultConfig.auto_clean_state_after_authentication;\r\n    }\n/**\n * @return {?}\n */\nget trigger_authorization_result_event(): boolean {\r\n        return this.openIDImplicitFlowConfiguration\r\n            .trigger_authorization_result_event !== undefined\r\n            ? this.openIDImplicitFlowConfiguration\r\n                  .trigger_authorization_result_event\r\n            : this.defaultConfig.trigger_authorization_result_event;\r\n    }\n/**\n * @return {?}\n */\nget log_console_warning_active(): boolean {\r\n        return this.openIDImplicitFlowConfiguration\r\n            .log_console_warning_active !== undefined\r\n            ? this.openIDImplicitFlowConfiguration.log_console_warning_active\r\n            : this.defaultConfig.log_console_warning_active;\r\n    }\n/**\n * @return {?}\n */\nget log_console_debug_active(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.log_console_debug_active !==\r\n            undefined\r\n            ? this.openIDImplicitFlowConfiguration.log_console_debug_active\r\n            : this.defaultConfig.log_console_debug_active;\r\n    }\n/**\n * @return {?}\n */\nget max_id_token_iat_offset_allowed_in_seconds(): number {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration\r\n                .max_id_token_iat_offset_allowed_in_seconds ||\r\n            this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget override_well_known_configuration(): boolean {\r\n        return this.openIDImplicitFlowConfiguration\r\n            .override_well_known_configuration !== undefined\r\n            ? this.openIDImplicitFlowConfiguration\r\n                  .override_well_known_configuration\r\n            : this.defaultConfig.override_well_known_configuration;\r\n    }\n/**\n * @return {?}\n */\nget override_well_known_configuration_url(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration\r\n                .override_well_known_configuration_url ||\r\n            this.defaultConfig.override_well_known_configuration_url\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget storage(): any {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.storage ||\r\n            this.defaultConfig.storage\r\n        );\r\n    }\n/**\n * @param {?} defaultConfig\n */\nconstructor(private defaultConfig: DefaultConfiguration) {}\n/**\n * @param {?} openIDImplicitFlowConfiguration\n * @return {?}\n */\ninit(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\r\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DefaultConfiguration, },\n];\n}\n\nfunction AuthConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthConfiguration.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthConfiguration.ctorParameters;\n/** @type {?} */\nAuthConfiguration.prototype.openIDImplicitFlowConfiguration;\n/** @type {?} */\nAuthConfiguration.prototype.defaultConfig;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n/**\n * Implement this class-interface to create a custom storage.\n * @abstract\n */\nexport abstract class OidcSecurityStorage {\n/**\n * This method must contain the logic to read the storage.\n * @abstract\n * @param {?} key\n * @return {?} The value of the given key\n */\nread(key: string) {}\n/**\n * This method must contain the logic to write the storage.\n * @abstract\n * @param {?} key\n * @param {?} value The value for the given key\n * @return {?}\n */\nwrite(key: string, value: any) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OidcSecurityStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityStorage.ctorParameters;\n}\n\nexport class BrowserStorage implements OidcSecurityStorage {\nprivate hasStorage: boolean;\n/**\n * @param {?} authConfiguration\n */\nconstructor(private authConfiguration: AuthConfiguration) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key));\n        }\n\n        return;\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\npublic write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n];\n}\n\nfunction BrowserStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStorage.ctorParameters;\n/** @type {?} */\nBrowserStorage.prototype.hasStorage;\n/** @type {?} */\nBrowserStorage.prototype.authConfiguration;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\r\n\r\nexport type SilentRenewState = 'running' | '';\nexport class OidcSecurityCommon {\nprivate storage_auth_result = 'authorizationResult';\n/**\n * @return {?}\n */\npublic get authResult(): any {\r\n        return this.retrieve(this.storage_auth_result);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set authResult(value: any) {\r\n        this.store(this.storage_auth_result, value);\r\n    }\nprivate storage_access_token = 'authorizationData';\n/**\n * @return {?}\n */\npublic get accessToken(): string {\r\n        return this.retrieve(this.storage_access_token) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set accessToken(value: string) {\r\n        this.store(this.storage_access_token, value);\r\n    }\nprivate storage_id_token = 'authorizationDataIdToken';\n/**\n * @return {?}\n */\npublic get idToken(): string {\r\n        return this.retrieve(this.storage_id_token) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set idToken(value: string) {\r\n        this.store(this.storage_id_token, value);\r\n    }\nprivate storage_is_authorized = '_isAuthorized';\n/**\n * @return {?}\n */\npublic get isAuthorized(): boolean | undefined {\r\n        return this.retrieve(this.storage_is_authorized);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set isAuthorized(value: boolean | undefined) {\r\n        this.store(this.storage_is_authorized, value);\r\n    }\nprivate storage_user_data = 'userData';\n/**\n * @return {?}\n */\npublic get userData(): any {\r\n        return this.retrieve(this.storage_user_data);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set userData(value: any) {\r\n        this.store(this.storage_user_data, value);\r\n    }\nprivate storage_auth_nonce = 'authNonce';\n/**\n * @return {?}\n */\npublic get authNonce(): string {\r\n        return this.retrieve(this.storage_auth_nonce) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set authNonce(value: string) {\r\n        this.store(this.storage_auth_nonce, value);\r\n    }\nprivate storage_auth_state_control = 'authStateControl';\n/**\n * @return {?}\n */\npublic get authStateControl(): string {\r\n        return this.retrieve(this.storage_auth_state_control) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set authStateControl(value: string) {\r\n        this.store(this.storage_auth_state_control, value);\r\n    }\nprivate storage_well_known_endpoints = 'wellknownendpoints';\n/**\n * @return {?}\n */\npublic get wellKnownEndpoints(): any {\r\n        return this.retrieve(this.storage_well_known_endpoints);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set wellKnownEndpoints(value: any) {\r\n        this.store(this.storage_well_known_endpoints, value);\r\n    }\nprivate storage_session_state = 'session_state';\n/**\n * @return {?}\n */\npublic get sessionState(): any {\r\n        return this.retrieve(this.storage_session_state);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set sessionState(value: any) {\r\n        this.store(this.storage_session_state, value);\r\n    }\nprivate storage_silent_renew_running = 'storage_silent_renew_running';\n/**\n * @return {?}\n */\npublic get silentRenewRunning(): SilentRenewState {\r\n        return this.retrieve(this.storage_silent_renew_running) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set silentRenewRunning(value: SilentRenewState) {\r\n        this.store(this.storage_silent_renew_running, value);\r\n    }\nprivate storage_custom_request_params = 'storage_custom_request_params';\n/**\n * @return {?}\n */\npublic get customRequestParams(): { [key: string]: string | number | boolean } {\r\n        return this.retrieve(this.storage_custom_request_params);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set customRequestParams(value: { [key: string]: string | number | boolean }) {\r\n        this.store(this.storage_custom_request_params, value);\r\n    }\n/**\n * @param {?} authConfiguration\n * @param {?} oidcSecurityStorage\n */\nconstructor(private authConfiguration: AuthConfiguration,\nprivate oidcSecurityStorage: OidcSecurityStorage) {\r\n    }\n/**\n * @return {?}\n */\nsetupModule() { }\n/**\n * @param {?} key\n * @return {?}\n */\nprivate retrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nprivate store(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\n/**\n * @param {?} isRenewProcess\n * @return {?}\n */\nresetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storage_auth_result, '');\r\n            this.store(this.storage_session_state, '');\r\n            this.store(this.storage_silent_renew_running, '');\r\n            this.store(this.storage_is_authorized, false);\r\n            this.store(this.storage_access_token, '');\r\n            this.store(this.storage_id_token, '');\r\n            this.store(this.storage_user_data, '');\r\n        }\r\n    }\n/**\n * @return {?}\n */\ngetAccessToken(): any {\r\n        return this.retrieve(this.storage_access_token);\r\n    }\n/**\n * @return {?}\n */\ngetIdToken(): any {\r\n        return this.retrieve(this.storage_id_token);\r\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogError(message: any) {\r\n        console.error(message);\r\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogWarning(message: any) {\r\n        if (this.authConfiguration.log_console_warning_active) {\r\n            console.warn(message);\r\n        }\r\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogDebug(message: any) {\r\n        if (this.authConfiguration.log_console_debug_active) {\r\n            console.log(message);\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: OidcSecurityStorage, },\n];\n}\n\nfunction OidcSecurityCommon_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityCommon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityCommon.ctorParameters;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_result;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_access_token;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_id_token;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_is_authorized;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_user_data;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_nonce;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_state_control;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_well_known_endpoints;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_session_state;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_silent_renew_running;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_custom_request_params;\n/** @type {?} */\nOidcSecurityCommon.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityCommon.prototype.oidcSecurityStorage;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\nimport { KJUR, KEYUTIL, hextob64u } from 'jsrsasign';\nexport class OidcSecurityValidation {\n/**\n * @param {?} oidcSecurityCommon\n */\nconstructor(private oidcSecurityCommon: OidcSecurityCommon) {}\n/**\n * @param {?} token\n * @param {?=} offsetSeconds\n * @return {?}\n */\nisTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n        let /** @type {?} */ decoded: any;\r\n        decoded = this.getPayloadFromToken(token, false);\r\n\r\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\r\n    }\n/**\n * @param {?} decoded_id_token\n * @param {?=} offsetSeconds\n * @return {?}\n */\nvalidate_id_token_exp_not_expired(\r\n        decoded_id_token: string,\r\n        offsetSeconds?: number\r\n    ): boolean {\r\n        const /** @type {?} */ tokenExpirationDate = this.getTokenExpirationDate(\r\n            decoded_id_token\r\n        );\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (!tokenExpirationDate) {\r\n            return false;\r\n        }\r\n\r\n        // Token not expired?\r\n        return (\r\n            tokenExpirationDate.valueOf() >\r\n            new Date().valueOf() + offsetSeconds * 1000\r\n        );\r\n    }\n/**\n * @param {?} dataIdToken\n * @return {?}\n */\nvalidate_required_id_token(dataIdToken: any): boolean {\r\n        let /** @type {?} */ validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning(\r\n                'iss is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning(\r\n                'sub is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning(\r\n                'aud is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning(\r\n                'exp is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning(\r\n                'iat is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        return validated;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} max_offset_allowed_in_seconds\n * @return {?}\n */\nvalidate_id_token_iat_max_offset(\r\n        dataIdToken: any,\r\n        max_offset_allowed_in_seconds: number\r\n    ): boolean {\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        const /** @type {?} */ dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\r\n\r\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\r\n\r\n        if (dateTime_iat_id_token == null) {\r\n            return false;\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug(\r\n            'validate_id_token_iat_max_offset: ' +\r\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\r\n                ' < ' +\r\n                max_offset_allowed_in_seconds * 1000\r\n        );\r\n        return (\r\n            new Date().valueOf() - dateTime_iat_id_token.valueOf() <\r\n            max_offset_allowed_in_seconds * 1000\r\n        );\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} local_nonce\n * @return {?}\n */\nvalidate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\r\n        if (dataIdToken.nonce !== local_nonce) {\r\n            this.oidcSecurityCommon.logDebug(\r\n                'Validate_id_token_nonce failed, dataIdToken.nonce: ' +\r\n                    dataIdToken.nonce +\r\n                    ' local_nonce:' +\r\n                    local_nonce\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} authWellKnownEndpoints_issuer\n * @return {?}\n */\nvalidate_id_token_iss(\r\n        dataIdToken: any,\r\n        authWellKnownEndpoints_issuer: any\r\n    ): boolean {\r\n        if (\r\n            ( /** @type {?} */((dataIdToken.iss as string))) !==\r\n            ( /** @type {?} */((authWellKnownEndpoints_issuer as string)))\r\n        ) {\r\n            this.oidcSecurityCommon.logDebug(\r\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n                    dataIdToken.iss +\r\n                    ' authWellKnownEndpoints issuer:' +\r\n                    authWellKnownEndpoints_issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} aud\n * @return {?}\n */\nvalidate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud instanceof Array) {\r\n            const /** @type {?} */ result = this.arraysEqual(dataIdToken.aud, aud);\r\n            if (!result) {\r\n                this.oidcSecurityCommon.logDebug(\r\n                    'Validate_id_token_aud  array failed, dataIdToken.aud: ' +\r\n                    dataIdToken.aud +\r\n                    ' client_id:' +\r\n                    aud\r\n                );\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } else if (dataIdToken.aud !== aud) {\r\n            this.oidcSecurityCommon.logDebug(\r\n                'Validate_id_token_aud failed, dataIdToken.aud: ' +\r\n                    dataIdToken.aud +\r\n                    ' client_id:' +\r\n                    aud\r\n            );\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} arr1\n * @param {?} arr2\n * @return {?}\n */\nprivate arraysEqual(arr1: Array<string>, arr2: Array<string>) {\r\n        if (arr1.length !== arr2.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let /** @type {?} */ i = arr1.length; i--;) {\r\n            if (arr1[i] !== arr2[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} state\n * @param {?} local_state\n * @return {?}\n */\nvalidateStateFromHashCallback(state: any, local_state: any): boolean {\r\n        if (( /** @type {?} */((state as string))) !== ( /** @type {?} */((local_state as string)))) {\r\n            this.oidcSecurityCommon.logDebug(\r\n                'ValidateStateFromHashCallback failed, state: ' +\r\n                    state +\r\n                    ' local_state:' +\r\n                    local_state\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} id_token_sub\n * @param {?} userdata_sub\n * @return {?}\n */\nvalidate_userdata_sub_id_token(\r\n        id_token_sub: any,\r\n        userdata_sub: any\r\n    ): boolean {\r\n        if (( /** @type {?} */((id_token_sub as string))) !== ( /** @type {?} */((userdata_sub as string)))) {\r\n            this.oidcSecurityCommon.logDebug(\r\n                'validate_userdata_sub_id_token failed, id_token_sub: ' +\r\n                    id_token_sub +\r\n                    ' userdata_sub:' +\r\n                    userdata_sub\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetPayloadFromToken(token: any, encode: boolean) {\r\n        let /** @type {?} */ data = {};\r\n        if (typeof token !== 'undefined') {\r\n            const /** @type {?} */ encoded = token.split('.')[1];\r\n            if (encode) {\r\n                return encoded;\r\n            }\r\n            data = JSON.parse(this.urlBase64Decode(encoded));\r\n        }\r\n\r\n        return data;\r\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetHeaderFromToken(token: any, encode: boolean) {\r\n        let /** @type {?} */ data = {};\r\n        if (typeof token !== 'undefined') {\r\n            const /** @type {?} */ encoded = token.split('.')[0];\r\n            if (encode) {\r\n                return encoded;\r\n            }\r\n            data = JSON.parse(this.urlBase64Decode(encoded));\r\n        }\r\n\r\n        return data;\r\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetSignatureFromToken(token: any, encode: boolean) {\r\n        let /** @type {?} */ data = {};\r\n        if (typeof token !== 'undefined') {\r\n            const /** @type {?} */ encoded = token.split('.')[2];\r\n            if (encode) {\r\n                return encoded;\r\n            }\r\n            data = JSON.parse(this.urlBase64Decode(encoded));\r\n        }\r\n\r\n        return data;\r\n    }\n/**\n * @param {?} id_token\n * @param {?} jwtkeys\n * @return {?}\n */\nvalidate_signature_id_token(id_token: any, jwtkeys: any): boolean {\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        const /** @type {?} */ header_data = this.getHeaderFromToken(id_token, false);\r\n\r\n        if (\r\n            Object.keys(header_data).length === 0 &&\r\n            header_data.constructor === Object\r\n        ) {\r\n            this.oidcSecurityCommon.logWarning('id token has no header data');\r\n            return false;\r\n        }\r\n\r\n        const /** @type {?} */ kid = header_data.kid;\r\n        const /** @type {?} */ alg = header_data.alg;\r\n\r\n        if ('RS256' !== ( /** @type {?} */((alg as string)))) {\r\n            this.oidcSecurityCommon.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let /** @type {?} */ isValid = false;\r\n\r\n        if (!header_data.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let /** @type {?} */ amountOfMatchingKeys = 0;\r\n            for (const /** @type {?} */ key of jwtkeys.keys) {\r\n                if (\r\n                    ( /** @type {?} */((key.kty as string))) === 'RSA' &&\r\n                    ( /** @type {?} */((key.use as string))) === 'sig'\r\n                ) {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys === 0) {\r\n                this.oidcSecurityCommon.logWarning(\r\n                    'no keys found, incorrect Signature, validation failed for id_token'\r\n                );\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1) {\r\n                this.oidcSecurityCommon.logWarning(\r\n                    'no ID Token kid claim in JOSE header and multiple supplied in jwks_uri'\r\n                );\r\n                return false;\r\n            } else {\r\n                for (const /** @type {?} */ key of jwtkeys.keys) {\r\n                    if (\r\n                        ( /** @type {?} */((key.kty as string))) === 'RSA' &&\r\n                        ( /** @type {?} */((key.use as string))) === 'sig'\r\n                    ) {\r\n                        const /** @type {?} */ publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, [\r\n                            'RS256'\r\n                        ]);\r\n                        if (!isValid) {\r\n                            this.oidcSecurityCommon.logWarning(\r\n                                'incorrect Signature, validation failed for id_token'\r\n                            );\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (const /** @type {?} */ key of jwtkeys.keys) {\r\n                if (( /** @type {?} */((key.kid as string))) === ( /** @type {?} */((kid as string)))) {\r\n                    const /** @type {?} */ publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, [\r\n                        'RS256'\r\n                    ]);\r\n                    if (!isValid) {\r\n                        this.oidcSecurityCommon.logWarning(\r\n                            'incorrect Signature, validation failed for id_token'\r\n                        );\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\n/**\n * @param {?} response_type\n * @return {?}\n */\nconfig_validate_response_type(response_type: string): boolean {\r\n        if (\r\n            response_type === 'id_token token' ||\r\n            response_type === 'id_token'\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        this.oidcSecurityCommon.logWarning(\r\n            'module configure incorrect, invalid response_type:' + response_type\r\n        );\r\n        return false;\r\n    }\n/**\n * @param {?} access_token\n * @param {?} at_hash\n * @return {?}\n */\nvalidate_id_token_at_hash(access_token: any, at_hash: any): boolean {\r\n        this.oidcSecurityCommon.logDebug('From the server:' + at_hash);\r\n        const /** @type {?} */ testdata = this.generate_at_hash('' + access_token);\r\n        this.oidcSecurityCommon.logDebug(\r\n            'client validation not decoded:' + testdata\r\n        );\r\n        if (testdata === ( /** @type {?} */((at_hash as string)))) {\r\n            return true; // isValid;\r\n        } else {\r\n            const /** @type {?} */ testValue = this.generate_at_hash(\r\n                '' + decodeURIComponent(access_token)\r\n            );\r\n            this.oidcSecurityCommon.logDebug('-gen access--' + testValue);\r\n            if (testValue === ( /** @type {?} */((at_hash as string)))) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\n/**\n * @param {?} access_token\n * @return {?}\n */\nprivate generate_at_hash(access_token: any): string {\r\n        const /** @type {?} */ hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\r\n        const /** @type {?} */ first128bits = hash.substr(0, hash.length / 2);\r\n        const /** @type {?} */ testdata = hextob64u(first128bits);\r\n\r\n        return testdata;\r\n    }\n/**\n * @param {?} dataIdToken\n * @return {?}\n */\nprivate getTokenExpirationDate(dataIdToken: any): Date {\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            return new Date();\r\n        }\r\n\r\n        const /** @type {?} */ date = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        date.setUTCSeconds(dataIdToken.exp);\r\n\r\n        return date;\r\n    }\n/**\n * @param {?} str\n * @return {?}\n */\nprivate urlBase64Decode(str: string) {\r\n        let /** @type {?} */ output = str.replace('-', '+').replace('_', '/');\r\n        switch (output.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                output += '==';\r\n                break;\r\n            case 3:\r\n                output += '=';\r\n                break;\r\n            default:\r\n                throw Error('Illegal base64url string!');\r\n        }\r\n\r\n        return window.atob(output);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OidcSecurityCommon, },\n];\n}\n\nfunction OidcSecurityValidation_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityValidation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityValidation.ctorParameters;\n/** @type {?} */\nOidcSecurityValidation.prototype.oidcSecurityCommon;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\nexport class AuthWellKnownEndpoints {\r\n    \r\n    onWellKnownEndpointsLoaded: EventEmitter<any> = new EventEmitter<any>(true);\r\n\r\n    issuer: string;\r\n    jwks_uri: string;\r\n    authorization_endpoint: string;\r\n    token_endpoint: string;\r\n    userinfo_endpoint: string;\r\n    end_session_endpoint: string;\r\n    check_session_iframe: string;\r\n    revocation_endpoint: string;\r\n    introspection_endpoint: string;\n/**\n * @param {?} http\n * @param {?} authConfiguration\n * @param {?} oidcSecurityCommon\n */\nconstructor(\nprivate http: HttpClient,\nprivate authConfiguration: AuthConfiguration,\nprivate oidcSecurityCommon: OidcSecurityCommon\r\n    ) {}\n/**\n * @return {?}\n */\nsetupModule() {\r\n        const /** @type {?} */ data = this.oidcSecurityCommon.wellKnownEndpoints;\r\n        this.oidcSecurityCommon.logDebug(data);\r\n        if (data) {\r\n            this.oidcSecurityCommon.logDebug(\r\n                'AuthWellKnownEndpoints already defined'\r\n            );\r\n\r\n            this.setWellKnownEndpoints(data);\r\n            this.onWellKnownEndpointsLoaded.emit();\r\n        } else {\r\n            this.oidcSecurityCommon.logDebug(\r\n                'AuthWellKnownEndpoints first time, get from the server'\r\n            );\r\n            this.getWellKnownEndpoints().subscribe((dataFromServer: any) => {\r\n                this.setWellKnownEndpoints(dataFromServer);\r\n\r\n                this.oidcSecurityCommon.wellKnownEndpoints = dataFromServer;\r\n                this.oidcSecurityCommon.logDebug(dataFromServer);\r\n\r\n                this.onWellKnownEndpointsLoaded.emit();\r\n            });\r\n        }\r\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate setWellKnownEndpoints(data: any) {\r\n        this.issuer = data.issuer;\r\n        this.jwks_uri = data.jwks_uri;\r\n        this.authorization_endpoint = data.authorization_endpoint;\r\n        this.token_endpoint = data.token_endpoint;\r\n        this.userinfo_endpoint = data.userinfo_endpoint;\r\n\r\n        if (data.end_session_endpoint) {\r\n            this.end_session_endpoint = data.end_session_endpoint;\r\n        }\r\n\r\n        if (data.check_session_iframe) {\r\n            this.check_session_iframe = data.check_session_iframe;\r\n        }\r\n\r\n        if (data.revocation_endpoint) {\r\n            this.revocation_endpoint = data.revocation_endpoint;\r\n        }\r\n\r\n        if (data.introspection_endpoint) {\r\n            this.introspection_endpoint = data.introspection_endpoint;\r\n        }\r\n    }\nprivate getWellKnownEndpoints = (): Observable<any> => {\r\n        let /** @type {?} */ headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        let /** @type {?} */ url =\r\n            this.authConfiguration.stsServer +\r\n            '/.well-known/openid-configuration';\r\n        if (this.authConfiguration.override_well_known_configuration) {\r\n            url = this.authConfiguration.override_well_known_configuration_url;\r\n        }\r\n\r\n        return this.http.get(url, {\r\n            headers: headers\r\n        });\r\n    };\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: AuthConfiguration, },\n{type: OidcSecurityCommon, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onWellKnownEndpointsLoaded': [{ type: Output },],\n};\n}\n\nfunction AuthWellKnownEndpoints_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthWellKnownEndpoints.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthWellKnownEndpoints.ctorParameters;\n/** @type {?} */\nAuthWellKnownEndpoints.propDecorators;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.onWellKnownEndpointsLoaded;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.issuer;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.jwks_uri;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.authorization_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.token_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.userinfo_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.end_session_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.check_session_iframe;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.revocation_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.introspection_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.getWellKnownEndpoints;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.http;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.authConfiguration;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.oidcSecurityCommon;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { timer } from 'rxjs/observable/timer';\r\nimport { pluck, take, timeInterval } from 'rxjs/operators';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\nexport class OidcSecurityCheckSession {\nprivate sessionIframe: any;\nprivate iframeMessageEvent: any;\r\n\r\n    \r\n    onCheckSessionChanged: EventEmitter<any> = new EventEmitter<any>(true);\n/**\n * @param {?} authConfiguration\n * @param {?} oidcSecurityCommon\n * @param {?} authWellKnownEndpoints\n */\nconstructor(\nprivate authConfiguration: AuthConfiguration,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ) {}\n/**\n * @return {?}\n */\ndoesSessionExist(): boolean {\r\n        let /** @type {?} */ existsparent = undefined;\r\n        try {\r\n            const /** @type {?} */ parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForCheckSession');\r\n        } catch ( /** @type {?} */e) {\r\n            // not accessible\r\n        }\r\n        const /** @type {?} */ exists = window.document.getElementById(\r\n            'myiFrameForCheckSession'\r\n        );\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (existsparent || exists) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\n/**\n * @return {?}\n */\ninit() {\r\n        this.sessionIframe = window.document.createElement('iframe');\r\n        this.sessionIframe.id = 'myiFrameForCheckSession';\r\n        this.oidcSecurityCommon.logDebug(this.sessionIframe);\r\n        this.sessionIframe.style.display = 'none';\r\n        window.document.body.appendChild(this.sessionIframe);\r\n        this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\r\n\r\n        this.iframeMessageEvent = this.messageHandler.bind(this);\r\n        window.addEventListener('message', this.iframeMessageEvent, false);\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\n/**\n * @param {?} clientId\n * @return {?}\n */\npollServerSession(clientId: any) {\r\n        const /** @type {?} */ source = timer(3000, 3000).pipe(\r\n            timeInterval(),\r\n            pluck('interval'),\r\n            take(10000)\r\n        );\r\n\r\n        source.subscribe(\r\n            () => {\r\n                if (this.sessionIframe && clientId) {\r\n                    this.oidcSecurityCommon.logDebug(this.sessionIframe);\r\n                    const /** @type {?} */ session_state = this.oidcSecurityCommon.sessionState;\r\n                    if (session_state) {\r\n                        this.sessionIframe.contentWindow.postMessage(\r\n                            clientId + ' ' + session_state,\r\n                            this.authConfiguration.stsServer\r\n                        );\r\n                    }\r\n                } else {\r\n                    this.oidcSecurityCommon.logWarning(\r\n                        'OidcSecurityCheckSession pollServerSession sessionIframe does not exist'\r\n                    );\r\n                    this.oidcSecurityCommon.logDebug(clientId);\r\n                    this.oidcSecurityCommon.logDebug(this.sessionIframe);\r\n                    // this.init();\r\n                }\r\n            },\r\n            (err: any) => {\r\n                this.oidcSecurityCommon.logError(\r\n                    'pollServerSession error: ' + err\r\n                );\r\n            },\r\n            () => {\r\n                this.oidcSecurityCommon.logDebug(\r\n                    'checksession pollServerSession completed'\r\n                );\r\n            }\r\n        );\r\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nprivate messageHandler(e: any) {\r\n        if (\r\n            this.sessionIframe &&\r\n            e.origin === this.authConfiguration.stsServer &&\r\n            e.source === this.sessionIframe.contentWindow\r\n        ) {\r\n            if (e.data === 'error') {\r\n                this.oidcSecurityCommon.logWarning(\r\n                    'error from checksession messageHandler'\r\n                );\r\n            } else if (e.data === 'changed') {\r\n                this.onCheckSessionChanged.emit();\r\n            } else {\r\n                this.oidcSecurityCommon.logDebug(\r\n                    e.data + ' from checksession messageHandler'\r\n                );\r\n            }\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: OidcSecurityCommon, },\n{type: AuthWellKnownEndpoints, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onCheckSessionChanged': [{ type: Output },],\n};\n}\n\nfunction OidcSecurityCheckSession_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityCheckSession.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityCheckSession.ctorParameters;\n/** @type {?} */\nOidcSecurityCheckSession.propDecorators;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.sessionIframe;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.iframeMessageEvent;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.onCheckSessionChanged;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.authWellKnownEndpoints;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\nexport class OidcSecuritySilentRenew {\nprivate sessionIframe: any;\n/**\n * @param {?} oidcSecurityCommon\n */\nconstructor(private oidcSecurityCommon: OidcSecurityCommon) {}\n/**\n * @return {?}\n */\ninitRenew() {\r\n        let /** @type {?} */ existsparent = undefined;\r\n        try {\r\n            const /** @type {?} */ parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch ( /** @type {?} */e) {\r\n            // not accessible\r\n        }\r\n        const /** @type {?} */ exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (!exists && !existsparent) {\r\n            this.sessionIframe = window.document.createElement('iframe');\r\n            this.sessionIframe.id = 'myiFrameForSilentRenew';\r\n            this.oidcSecurityCommon.logDebug(this.sessionIframe);\r\n            this.sessionIframe.style.display = 'none';\r\n\r\n            window.document.body.appendChild(this.sessionIframe);\r\n        }\r\n    }\n/**\n * @param {?} url\n * @return {?}\n */\nstartRenew(url: string) {\r\n        let /** @type {?} */ existsparent = undefined;\r\n        try {\r\n            const /** @type {?} */ parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch ( /** @type {?} */e) {\r\n            // not accessible\r\n        }\r\n        const /** @type {?} */ exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug('startRenew for URL:' + url);\r\n        this.sessionIframe.src = url;\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OidcSecurityCommon, },\n];\n}\n\nfunction OidcSecuritySilentRenew_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecuritySilentRenew.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecuritySilentRenew.ctorParameters;\n/** @type {?} */\nOidcSecuritySilentRenew.prototype.sessionIframe;\n/** @type {?} */\nOidcSecuritySilentRenew.prototype.oidcSecurityCommon;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { map } from 'rxjs/operators';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\nexport class OidcSecurityUserService {\r\n    userData = '';\n/**\n * @param {?} http\n * @param {?} oidcSecurityCommon\n * @param {?} authWellKnownEndpoints\n */\nconstructor(\nprivate http: HttpClient,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ) {}\n/**\n * @return {?}\n */\ninitUserData() {\r\n        return this.getIdentityUserData().pipe(\r\n            map((data: any) => (this.userData = data))\r\n        );\r\n    }\nprivate getIdentityUserData = (): Observable<any> => {\r\n        let /** @type {?} */ headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        const /** @type {?} */ token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        if (token) {\r\n            headers = headers.set(\r\n                'Authorization',\r\n                'Bearer ' + decodeURIComponent(token)\r\n            );\r\n        }\r\n\r\n        return this.http.get(this.authWellKnownEndpoints.userinfo_endpoint, {\r\n            headers: headers\r\n        });\r\n    };\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: OidcSecurityCommon, },\n{type: AuthWellKnownEndpoints, },\n];\n}\n\nfunction OidcSecurityUserService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityUserService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityUserService.ctorParameters;\n/** @type {?} */\nOidcSecurityUserService.prototype.userData;\n/** @type {?} */\nOidcSecurityUserService.prototype.getIdentityUserData;\n/** @type {?} */\nOidcSecurityUserService.prototype.http;\n/** @type {?} */\nOidcSecurityUserService.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityUserService.prototype.authWellKnownEndpoints;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type AuthorizationResult = number;\nexport let AuthorizationResult: any = {};\nAuthorizationResult.authorized = 1;\nAuthorizationResult.forbidden = 2;\nAuthorizationResult.unauthorized = 3;\nAuthorizationResult[AuthorizationResult.authorized] = \"authorized\";\nAuthorizationResult[AuthorizationResult.forbidden] = \"forbidden\";\nAuthorizationResult[AuthorizationResult.unauthorized] = \"unauthorized\";\n\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n"],"names":["UriEncoder","prototype","encodeValue","value","encodeURIComponent","decodeKey","key","decodeURIComponent","decodeValue","ValidateStateResult","access_token","id_token","authResponseIsValid","decoded_id_token","this","StateValidationService","authConfiguration","oidcSecurityCommon","authWellKnownEndpoints","oidcSecurityValidation","OidcSecurityValidation","validateState","result","jwtKeys","toReturn","validateStateFromHashCallback","state","authStateControl","response_type","getPayloadFromToken","validate_signature_id_token","validate_id_token_nonce","authNonce","validate_required_id_token","validate_id_token_iat_max_offset","max_id_token_iat_offset_allowed_in_seconds","validate_id_token_iss","issuer","validate_id_token_aud","client_id","validate_id_token_exp_not_expired","successful_validation","validate_id_token_at_hash","at_hash","logWarning","logDebug","auto_clean_state_after_authentication","decorators","type","Injectable","ctorParameters","AuthConfiguration","OidcSecurityCommon","AuthWellKnownEndpoints","OidcSecurityService","platformId","http","stateValidationService","router","oidcSecurityCheckSession","oidcSecuritySilentRenew","oidcSecurityUserService","onModuleSetup","EventEmitter","onAuthorizationResult","moduleSetup","_isAuthorized","BehaviorSubject","lastUserData","undefined","_userData","authWellKnownEndpointsLoaded","setupModule","openIDImplicitFlowConfiguration","_this","init","onCheckSessionChanged","subscribe","onWellKnownEndpointsLoaded","onUserDataChanged","userData","setUserData","isAuthorized","setIsAuthorized","runTokenValidation","stsServer","isPlatformBrowser","emit","silent_renew","initRenew","start_checksession","doesSessionExist","pollServerSession","getUserData","asObservable","getIsAuthorized","getToken","_isAuthorizedValue","token","getAccessToken","getIdToken","getPayloadFromIdToken","encode","setState","getState","setCustomRequestParameters","params","customRequestParams","authorize","wellKnownEndpoints","logError","config_validate_response_type","resetAuthorizationData","Date","now","Math","random","nonce","url","createAuthorizeUrl","authorization_endpoint","window","location","href","authorizedCallback","hash","silentRenew","silentRenewRunning","isRenewProcess","substr","split","reduce","resultData","item","parts","authResult","getSigningKeys","validationResult","getValidatedStateResult","setAuthorizationData","auto_userinfo","getUserinfo","response","trigger_authorization_result_event","AuthorizationResult","authorized","navigate","post_login_route","unauthorized","unauthorized_route","idToken","Observable","observer","sessionState","session_state","next","complete","initUserData","validate_userdata_sub_id_token","sub","accessToken","logoff","end_session_endpoint","id_token_hint","createEndSessionUrl","checkSessionChanged","refreshSession","startRenew","handleError","error","status","forbidden_route","prompt","urlParts","authorizationUrl","HttpParams","fromString","encoder","set","append","redirect_url","scope","hd_param","customParams","Object","assign","keys","forEach","toString","authorizationEndsessionUrl","post_logout_redirect_uri","resetStorageData","jwks_uri","get","pipe","catchError","handleErrorGetSigningKeys","errMsg","Response","body","json","err","JSON","stringify","statusText","message","console","throw","runTokenValidationRunning","timer","timeInterval","pluck","take","isTokenExpired","silent_renew_offset_in_seconds","Inject","args","PLATFORM_ID","HttpClient","Router","OidcSecurityCheckSession","OidcSecuritySilentRenew","OidcSecurityUserService","propDecorators","Output","AuthModule","forRoot","ngModule","providers","DefaultConfiguration","provide","OidcSecurityStorage","useClass","storage","BrowserStorage","NgModule","iterator","iterators","i","hasValue","shouldComplete","len","hasCompleted","done","destination","push","project","_tryProject","ZipSubscriber","apply","Subscriber_1","Subscriber","StaticIterator","nextResult","StaticArrayIterator","array","index","length","iterator_1","ZipBufferIterator","_super","parent","observable","call","stillUnsubscribed","buffer","isComplete","__extends","shift","notifyComplete","notifyInactive","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","checkIterators","subscribeToResult_1","subscribeToResult","OuterSubscriber_1","OuterSubscriber","catchError_1","map","map_1","pluck_1","take_1","timeInterval_1","resource","log_console_warning_active","log_console_debug_active","override_well_known_configuration","override_well_known_configuration_url","Storage","sessionStorage","OpenIDImplicitFlowConfiguration","defaultConfig","defineProperty","read","write","hasStorage","parse","getItem","setItem","oidcSecurityStorage","storage_auth_result","storage_access_token","storage_id_token","storage_is_authorized","storage_user_data","storage_auth_nonce","storage_auth_state_control","storage_well_known_endpoints","storage_session_state","storage_silent_renew_running","storage_custom_request_params","retrieve","store","warn","log","offsetSeconds","decoded","tokenExpirationDate","getTokenExpirationDate","valueOf","dataIdToken","validated","hasOwnProperty","max_offset_allowed_in_seconds","dateTime_iat_id_token","setUTCSeconds","iat","local_nonce","authWellKnownEndpoints_issuer","iss","aud","Array","arraysEqual","arr1","arr2","local_state","id_token_sub","userdata_sub","data","encoded","urlBase64Decode","getHeaderFromToken","getSignatureFromToken","jwtkeys","header_data","constructor","kid","alg","isValid","_d","_e","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","_i","_a","_b","_c","testdata","generate_at_hash","testValue","crypto","Util","hashString","first128bits","hextob64u","date","exp","str","output","replace","Error","atob","getWellKnownEndpoints","headers","HttpHeaders","setWellKnownEndpoints","dataFromServer","token_endpoint","userinfo_endpoint","check_session_iframe","revocation_endpoint","introspection_endpoint","existsparent","parentdoc","document","getElementById","e","exists","sessionIframe","createElement","id","style","display","appendChild","src","iframeMessageEvent","messageHandler","bind","addEventListener","create","onload","clientId","contentWindow","postMessage","origin","source","getIdentityUserData","forbidden","encodeKey","SingleSubscriber","tryNext","predicate","applySingleValue","_complete","seenValue","singleValue","EmptyError_1","EmptyError","SkipSubscriber","total","count","_next","x","SkipLastSubscriber","_skipCount","_count","_ring","skipCount","currentIndex","ring","oldValue","SkipUntilSubscriber","notifier","isInnerStopped","add","unsubscribe","isStopped","SkipWhileSubscriber","skipping","tryCallPredicate","Boolean","SwitchMapSubscriber","resultSelector","_innerSub","innerSubscription","closed","_unsubscribe","remove","_tryNotifyNext","SwitchMapToSubscriber","inner","tryResultSelector","take_2","TakeOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","subscriber","TakeSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","DoSubscriber","nextOrObserver","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","_error","throttle","durationSelector","config","exports","defaultThrottleConfig","lift","ThrottleOperator","leading","trailing","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","throttled","_trailingValue","duration","tryDurationSelector","_sendTrailing","ThrottleTimeSubscriber","scheduler","schedule","dispatchNext","clearThrottle","timeInterval_2","TimeInterval","interval","TimeInterval_1","TimeIntervalOperator","TimeIntervalSubscriber","lastTime","span","TimeoutError","name","stack","TimeoutSubscriber","absoluteTimeout","waitFor","errorInstance","action","scheduleTimeout","dispatchTimeout","TimeoutWithSubscriber","withObservable","_unsubscribeAndRecycle","WindowSubscriber","Subject_1","Subject","openWindow","notifyError","prevWindow","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","windows","c","window_1","CountedSubject","arguments","_numberOfNextedValues","WindowTimeSubscriber","windowTimeSpan","windowCreationInterval","maxWindowSize","closeState","context","creationState","dispatchWindowClose","dispatchWindowCreation","timeSpanOnlyState","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","splice","indexOf","WindowToggleSubscriber","openings","closingSelector","contexts","openSubscription","subscription","closingNotifier","tryCatch_1","tryCatch","errorObject_1","errorObject","Subscription_1","Subscription","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","observables","toRespond","values","found","concat","active","isArray_1","isArray","defaultValue","lastValue","LastSubscriber","_tryPredicate","_tryResultSelector","map_2","MapOperator","thisArg","MapSubscriber","MapOperator_1","MapToSubscriber","MaterializeSubscriber","Notification_1","Notification","createNext","createError","createComplete","ScanSubscriber","accumulator","_seed","hasSeed","_tryNext","seed","TakeLastSubscriber","idx","MergeMapToSubscriber","ish","concurrent","Number","POSITIVE_INFINITY","trySelectResult","MergeScanSubscriber","acc","refCount_2","refCount","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ConnectableSubscriber","ConnectableObservable","subjectFactory","_isComplete","_subscribe","getSubject","subject","_subject","EMPTY","refCount_1","Observable_1","SubjectSubscriber","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","pluck_2","PairwiseSubscriber","hasPrev","prev","_value","getValue","hasError","thrownError","ObjectUnsubscribedError_1","ObjectUnsubscribedError","AsyncSubject","hasNext","QueueAction","work","delay","flush","execute","_execute","requestAsyncId","AsyncAction_1","AsyncAction","QueueAction_2","QueueScheduler","AsyncScheduler_1","AsyncScheduler","QueueScheduler_2","queue_1","QueueScheduler_1","QueueAction_1","ReplayEvent","ReplaySubject","bufferSize","windowTime","_events","_bufferSize","_windowTime","_getNow","_trimBufferThenGetEvents","observers","SubjectSubscription_1","SubjectSubscription","observeOn_1","ObserveOnSubscriber","queue","eventsCount","spliceCount","time","max","RaceSubscriber","hasFirst","subscriptions","RepeatSubscriber","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","RetrySubscriber","RetryWhenSubscriber","errors","SampleSubscriber","emitValue","SampleTimeSubscriber","period","dispatchNotification","SequenceEqualCompareToSubscriber","SequenceEqualSubscriber","compareTo","comparor","_oneComplete","checkValues","a","b","areEqual","nextB","DefaultIfEmptySubscriber","isEmpty","DelayMessage","DelaySubscriber","errored","dispatch","notification","observe","delay_1","_schedule","scheduleNotification","SubscriptionDelaySubscriber","DelayWhenSubscriber","delayDurationSelector","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","sourceSubscribed","unused","subscribeToSource","minimalSetImpl_1","DeMaterializeSubscriber","minimalSetImpl","Set","root_1","root","DistinctSubscriber","keySelector","flushes","Set_1","clear","_useKeySelector","_finalizeNext","has","DistinctUntilChangedSubscriber","compare","hasKey","y","ArgumentOutOfRangeError_2","ElementAtSubscriber","EverySubscriber","everyValueMatch","SwitchFirstSubscriber","hasSubscription","SwitchFirstMapSubscriber","ExpandSubscriber","arg","subscribeToProjection","FilterSubscriber","FinallySubscriber","callback","FindValueSubscriber","yieldIndex","EmptyError_2","FirstSubscriber","_emitted","_emit","_emitFinal","ObjectUnsubscribedError_2","subscriberIndex","SubjectSubscription_2","SubjectSubscriber_1","rxSubscriber_1","rxSubscriber","operator","AnonymousSubject","copy","slice","_trySubscribe","Subject_2","AnonymousSubject_1","MapPolyfill","size","_values","_keys","delete","cb","MapPolyfill_2","Map","MapPolyfill_1","FastMap","FastMap_2","GroupDurationSubscriber","GroupBySubscriber","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","FastMap_1","Map_1","element","group","groupedObservable","GroupedObservable","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsSubscriber","noop_1","noop","IsEmptySubscriber","BufferCountSubscriber","BufferSkipCountSubscriber","startBufferEvery","buffers","Context","BufferTimeOperator","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeSubscriber","openContext","timespanOnly","closeAction","dispatchBufferTimeSpanOnly","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","subscribing","closingSubscription","catchError_2","CatchOperator","selector","CatchSubscriber","caught","err2","ScalarObservable","_isScalar","ScalarObservable_2","EmptyObservable","EmptyObservable_2","ArrayObservable","of","isScheduler_1","isScheduler","pop","ScalarObservable_1","EmptyObservable_1","ArrayObservable_2","none","CombineLatestSubscriber","oldVal","PromiseObservable","promise","then","setTimeout","dispatchError","PromiseObservable_2","IteratorObservable","getIterator","return","IteratorObservable_2","StringIterator","charAt","ArrayIterator","arr","toLength","maxSafeInteger","pow","ArrayLikeObservable","arrayLike","ArrayLikeObservable_2","kind","do","accept","toObservable","empty","undefinedValueNotification","completeNotification","Notification_2","observeOn_2","observeOn","ObserveOnOperator","ObserveOnOperator_1","scheduleMessage","ObserveOnMessage","ObserveOnSubscriber_1","ObserveOnMessage_1","FromObservable","observable_1","ArrayObservable_1","isPromise_1","isPromise","PromiseObservable_1","IteratorObservable_1","isArrayLike_1","isArrayLike","ArrayLikeObservable_1","TypeError","MergeMapSubscriber","_notifyResultSelector","CountSubscriber","DebounceSubscriber","durationSubscription","DebounceTimeSubscriber","dueTime","debouncedSubscription","clearDebounce","debouncedNext","tryCatcher","tryCatchTarget","fn","isFunction","isObject","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","UnsubscriptionError","toSubscriber","Observer_1","fns","pipeFromArray","input","outerSubscriber","InnerSubscriber_1","InnerSubscriber","obs","isObject_1","msg","isNumeric","val","parseFloat","isDate","isNaN","prevContext","obj","o","numberIsFinite","sign","floor","abs","isFinite","valueAsNumber","MinimalSet","properties","plucker","props","currentProp","p","async_1","async","timeSpanState","tryCatch_2","isFunction_2","isObject_2","join","UnsubscriptionError_2","_parent","_parents","_subscriptions","hasErrors","isFunction_1","trial","teardown","_addParent","tmp","subscriptionIndex","Subscription_2","__window","__self","self","WorkerGlobalScope","__global","global","_root","Symbol","for","$$rxSubscriber","destinationOrNext","SafeSubscriber","Subscriber_2","_parentSubscriber","observerOrNext","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","OuterSubscriber_2","isPromise_2","toSubscriber_2","getSymbolObservable","$$observable","noop_2","pipe_2","pipeFromArray_1","sink","toSubscriber_1","PromiseCtor","Rx","Promise","resolve","reject","operations","pipe_1","toPromise","Observable_2","symbolIteratorPonyfill","getOwnPropertyNames","$$iterator","InnerSubscriber_2","subscribeToResult_2","AuditSubscriber","Action","Action_2","pending","recycleAsyncId","setInterval","clearInterval","errorValue","actions","Action_1","AsyncAction_2","Scheduler","SchedulerAction","Scheduler_2","scheduled","Scheduler_1","AsyncScheduler_2","isNumeric_2","isScheduler_2","isDate_2","TimerObservable","isNumeric_1","isDate_1","initialDelay","BufferSubscriber"],"mappings":"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"}